{".eslintrc.js":{"unit":"standard","comp":".eslintrc.js","addedCode":{"lintRules":"\n        \"no-console\": [\"error\"],\n        \"@typescript-eslint/no-var-requires\": \"off\",\n        \"@typescript-eslint/explicit-module-boundary-types\": \"off\",\n        \"@typescript-eslint/ban-types\": \"off\",\n        \"@typescript-eslint/no-explicit-any\":\"off\",\n        \"@typescript-eslint/ban-ts-comment\": \"off\"\n        "},"replacedCode":{},"removedCode":{}},"README.md":{"unit":"standard","comp":"README.md","addedCode":{"beginning":"\n","description":"\n![](src/custom/images/headstart.gif)\nproject creator: execute a set of standard processes and installations into a directory\n","afterDescription":"\n","badges":"\n\n[//]: # ( ns__start_section usageSection )\n\n[![Version](https://img.shields.io/npm/v/head-start.svg)](https://npmjs.org/package/head-start)\n[![Downloads/week](https://img.shields.io/npm/dw/head-start.svg)](https://npmjs.org/package/head-start)\n[![License](https://img.shields.io/npm/l/head-start.svg)](https://github.com/YizYah/head-start/blob/master/package.json)\n\n[![Geenee](https://img.shields.io/badge/maintained%20by-geenee-brightgreen)](https://npmjs.org/package/geenee)\n[![Template](https://img.shields.io/badge/template-ts--packrat-blue)](https://npmjs.org/package/ts-packrat)\n\n<!-- toc -->\n* [:clipboard: Why](#clipboard-why)\n* [:white_check_mark: What](#white_check_mark-what)\n* [:bulb: How](#bulb-how)\n* [:wrench: Example](#wrench-example)\n* [:zap: Steps to Create a Setup Sequence](#zap-steps-to-create-a-setup-sequence)\n* [:heavy_exclamation_mark: API](#heavy_exclamation_mark-api)\n<!-- tocstop -->\n\n# <a name=\"clipboard-why\"></a>:clipboard: Why\nIf you want to create (or let others create) a type of project multiple times, you probably execute some common commands and install the latest version of several packages.\n\nIn effect, you go through standard steps for whatever type of app you are templating.  \n\nIt would be nice to provide that easily for yourself or others.  Like a `create` package.\n\n# <a name=\"white_check_mark-what\"></a>:white_check_mark: What\nAn function for executing a startup sequence.  The sequence is specified within a json that includes a set of commands that you normally execute. \n\n# <a name=\"bulb-how\"></a>:bulb: How\nInstall:\n```\nnpm i head-start\n```\nThen call directly:\n```\nconst createStarter = require('head-start')\n\nconst setupSequence = {\n  \"preCommands\": [\n    {\n      \"title\": \"run git\",\n      \"file\": \"git\",\n      \"arguments\": [\n        \"init\",\n        \"$codeDir\"\n      ]\n    },\n    {\n      \"title\": \"create package.json\",\n      \"file\": \"npm\",\n      \"arguments\": [\n        \"init\",\n        \"-y\"\n      ],\n      \"options\": {\n        \"cwd\": \"$codeDir\"\n      }\n    }\n  ],\n  \"mainInstallation\": [\n    \"@types/node@14.14.19\",\n    \"tslib@2.0.3\",\n    \"typescript@4.1.3\",\n    \"path\"\n  ],\n  \"devInstallation\": [\n    \"@typescript-eslint/eslint-plugin@4.12.0\",\n    \"@typescript-eslint/parser@4.12.0\",\n    \"eslint@7.17.0\",\n    \"prettier@2.2.1\",\n    \"nyc@14.1.1\",\n    \"ava\",\n    \"ts-node\"\n  ]\n}\n\nconst codeDir = '~/temp/mySample'\nconst session = {\n  \"notWin\": true,\n  \"userName\": \"YizYah\",\n  \"defaultProjectName\": \"mySample\"\n}\n\nawait createStarter(\n  setupSequence, codeDir, session\n)\n```\n\n## Arguments\n* `setupSequence` is a SetupSequence from the Configuration type exposed in [magicalstrings](https://www.npmjs.com/package/magicalstrings#types)\n* `codeDir` is the path to the directory to create.  If it exists already, an error is thrown.\n* session is a dynamically declared mapping of keys and string values used with [dynamapping](https://www.npmjs.com/package/dynamapping) to replace any instances in `setupSequence`.  Note that `$codeDir` is a special reserved string for the value of `codeDir`.\n\n# <a name=\"wrench-example\"></a>:wrench: Example\nIt is used inside [geenee](https://www.npmjs.com/package/geenee) templates, where `setupSequence` is including in the `config.yml` file.\n\n# <a name=\"zap-steps-to-create-a-setup-sequence\"></a> :zap:Steps to Create a Setup Sequence\n\n---\n **_Note_**  You can use [copykat](https://www.npmjs.com/package/copykat) to guide you through the process of creating a full [geenee](https://www.npmjs.com/package/geenee) template, including the the startup sequence.  You can even do that and then copy the `startupSequence` from the config.yml file of the generated template.\n\n---\n\nSee the [config file for the sample template](https://github.com/YizYah/basicNsFrontTemplate/blob/master/config.yml) as a model.\n\nThere are four keys under `setupSequence`:\n1. `interactive`\n\n2. `preCommands`\n\n3. `mainInstallation`\n\n4. `devInstallation`\n\nEach is discussed in its own section.\n\n## **`interactive`**\nYou may start the process of generating code by running any number of interactive programs. These can even be bash scripts included in your template file.  You specify a list, and they get executed in the same order.  For each, provide:\n\n* `file` the name of the command or bash script that you want to execute.  (Note: `npx` is usually the best option for a released package.  That lets you get the latest version and removes the need for a template user to have something installed globally. So, rather than running `oclif`, you would run `npx` and make `oclif` the first argument)\n\n* `arguments` the list of arguments passed into the command.  These are strings.\n\n  There is currently one general variable that you can use in `arguments`: `$codeDir`.  The value of `$codeDir` is whatever the name of the code base that gets passed by the user to `ns generate`.\n\n* `options` an optional list of the options for [child_process](https://nodejs.org/api/child_process.html).\n\nAn example of an `interactive` entry would be this:\n\n```handlebars\nsetupSequence:\n    ...\n    interactive:\n       - file: npx\n         arguments:\n           - oclif\n           - multi\n           - $codeDir\n``` \n\nThis list consists of a single command--running `oclif` using `npx`.  The name that gets passed to oclif as an argument should be replaced by the name of your `$SAMPLE` code.\n\nAll of the `interactive` list will be executed in order.  The user will have the opportunity to insert anything needed as prompted.\n\n**_Note_** It is actually better to insert any command that is *not* interactive [that executes without user interactions] under `precommands` as specified below.  It is better to have multiple templates that leave as little as possible up to the user running `ns generate`.  The only reason for `interactive` is that some programs do not allow you to specify options programmatically, so you have to run them interactively.\n\n##  **`preCommands`**\nThis is a list of *un*interactive files or programs that get executed automatically in the order that you place them.\n* A `title` will show up when your template user watches the progress from the command prompt.\n* The same 3 keys shown in `interactive` above: `file`, `arguments` and perhaps `options`.\n\nThe purpose of `preCommands` is to run tools like `createReactApp`.  Note that you could create a bash script, stored in your template directory, to execute.  So you have the ability to run whatever sequence you like.\n\n## **`mainInstallation`**\nThis is an array of packages that get installed by `npm`. See the [sample config file](https://github.com/YizYah/basicNsFrontTemplate/blob/master/config.yml).\n\n## **`devInstallation`**\nAn array of packages that get installed by `npm` for dev.\n\nAgain, see the [sample config file](https://github.com/YizYah/basicNsFrontTemplate/blob/master/config.yml).\n\n## Leaving Versions Dynamic\nA big goal of `geenee` is to let you have the latest of everything in your stack, so we encourage this approach rather than providing a hardcoded `package.json` file. On the debit side, you need to be sure to update any code if conflicts arise with the latest versions of packages used.\n\nIf need be, you can of course hardcode the version of a package listed in `mainInstallation` or\n`devInstallation`, e.g. `'@apollo/react-hoc@3.1.5'` in the [config file for the sample template](https://github.com/YizYah/basicNsFrontTemplate/blob/master/config.yml).\n\n","APIIntro":"\n# <a name=\"heavy_exclamation_mark-api\"></a>:heavy_exclamation_mark: API\n","constantsIntro":"\n## General Constants and Commands\n"},"replacedCode":{},"removedCode":{}},"lib/index.js":{"unit":"standard","comp":"src/index.ts","addedCode":{"beginning":"\nimport {createStarter} from './custom/createStarter'\n","export":"\nmodule.exports = createStarter\n"},"replacedCode":{},"removedCode":{}},"test/index.test.ts":{"unit":"standard","comp":"test/index.test.ts","addedCode":{"customImports":"\n","general":"\ntest('general', t => {\n  // replace with whatever you'd like.  To start over with the default, remove everything including the\n  t.not(typeof output, \"undefined\")\n});\n"},"replacedCode":{},"removedCode":{}}}
